#+TITLE: Emacs Init
#+AUTHOR: Sam Doshi
#+EMAIL: sam@metal-fish.co.uk

* Emacs Init as an Org file
** Useful links
- [[https://github.com/jhenahan/emacs.d/blob/master/emacs-init.org][jhenahan/emacs.d]]
- [[https://github.com/daschwa/dotfiles/blob/master/emacs.d/emacs-init.org][daschwa/emacs.d]]
- [[https://github.com/steckerhalter/steckemacs/blob/master/steckemacs.org][steckerhalter/steckemacs]]
- [[https://github.com/cofi/dotfiles/tree/master/emacs.d/config][cofi/dotfiles]]

** Initialize req-package
[[https://github.com/edvorg/req-package][req-package]] extends [[https://github.com/jwiegley/use-package][use-package]], each =req-package= macro will be run once =req-package-finish= is run (at the bottom of this file).
#+BEGIN_SRC emacs-lisp
(require 'req-package)
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
 #+END_SRC

* Evil
** Evil
Make sure we set =evil-want-C-u-scroll= & others before =evil= is loaded.
#+BEGIN_SRC emacs-lisp
(setq evil-want-C-u-scroll t)
(setq evil-want-C-w-in-emacs-state t)
(setq evil-default-cursor t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(req-package evil
  :ensure evil
  :requires (ace-jump-mode evil-leader key-chord undo-tree)
  :init
  (progn
    (evil-mode 1)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
    (bind-key "SPC" 'ace-jump-char-mode evil-motion-state-map)
    (bind-key "S-SPC" 'ace-jump-word-mode evil-motion-state-map)
    (add-to-list 'evil-insert-state-modes 'deft-mode)))
#+END_SRC

** Evil leader
#+BEGIN_SRC emacs-lisp
(req-package evil-leader
  :ensure evil-leader
  :requires helm
  :init
  (progn
    (evil-leader/set-leader ",")
    (global-evil-leader-mode)
    (evil-leader/set-key
      "e"  'find-file
      "b"  'switch-to-buffer
      "d"  'deft
      "f"  'helm-flycheck
      "h"  'helm-mini
      "k"  'kill-buffer
      "se" (lambda () (interactive)
             (find-file "~/.emacs.d/emacs-init.org"))
      "x"  'execute-extended-command)))
#+END_SRC

* Major Modes
** Deft
#+BEGIN_SRC emacs-lisp
(req-package deft
  :ensure deft
  :commands deft
  :init
  (progn
    (setq deft-extension "org")
    (setq deft-text-mode 'org-mode)
    (setq deft-use-filename-as-title t)
    (setq deft-directory "~/Dropbox/Application Support/Deft")))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(req-package haskell-mode
  :ensure haskell-mode
  :requires popwin
  :commands haskell-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.l?hs$" . haskell-mode))
  :config
  (progn
    (defun init/haskell-hook ()
      (turn-on-haskell-indentation)
      (turn-on-haskell-doc)
      (diminish 'haskell-doc-mode "")
      (turn-on-eldoc-mode)
      (diminish 'eldoc-mode "")
      (turn-on-haskell-decl-scan))
    (add-hook 'haskell-mode-hook 'init/haskell-hook)
    (bind-key "C-c C-c" 'haskell-compile haskell-mode-map)
    (push '("*haskell-compilation*" :height 20) popwin:special-display-config)))
#+END_SRC
** Magic
#+BEGIN_SRC emacs-lisp
(req-package magit)
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(req-package org-install
  :ensure org
  :init
  (progn
    (setq org-startup-indented t)
    (setq org-src-fontify-natively t)))
#+END_SRC

* Minor Modes
** Ace jump mode
#+BEGIN_SRC emacs-lisp
(req-package ace-jump-mode
  :ensure ace-jump-mode)
#+END_SRC
** Adaptive wrap
#+BEGIN_SRC emacs-lisp
(req-package adaptive-wrap
  :ensure adaptive-wrap
  :init
  (progn
    (add-hook 'visual-line-mode-hook 'adaptive-wrap-prefix-mode)))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
(req-package flycheck
  :ensure flycheck
  :init (add-hook 'after-init-hook 'global-flycheck-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(req-package helm-flycheck
  :commands helm-flycheck
  :requires flycheck)
#+END_SRC

** Flyspell
#+BEGIN_SRC emacs-lisp
;;(req-package flyspell
;;  :init
;;  (progn
;;    (add-hook 'text-mode-hook 'flyspell-mode)
;;    (add-hook 'prog-mode-hook 'flyspell-prog-mode)))
#+END_SRC

** Git gutter fringe
#+BEGIN_SRC emacs-lisp
(req-package git-gutter-fringe
  :diminish git-gutter-mode
  :idle (global-git-gutter-mode))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
(req-package helm
  :ensure helm
  :requires popwin
  :diminish helm-mode
  :config
  (progn
    (require 'helm-config)
    (require 'helm-files)
    (setq popwin:special-display-config
          (append helm-popwin
                  popwin:special-display-config))
    (bind-key "C-j" 'helm-next-line helm-map)
    (bind-key "C-k" 'helm-previous-line helm-map)
    (bind-key "C-S-j" 'helm-next-source helm-map)
    (bind-key "C-S-k" 'helm-previous-source helm-map)
    ;; for helm-find-files
    (bind-key "<tab>" 'helm-execute-persistent-action helm-find-files-map)
    ;; for find-file
    (bind-key "<tab>" 'helm-execute-persistent-action helm-read-file-map)
    (helm-mode 1)))
#+END_SRC

** Key chord
#+BEGIN_SRC emacs-lisp
(req-package key-chord
  :ensure key-chord
  :init
  (progn
    (setq key-chord-two-keys-delay 0.2)
    (key-chord-mode 1)))
#+END_SRC

** Linum
Line numbers in programming modes
#+BEGIN_SRC emacs-lisp
(req-package linum
  :config
  (progn
    (add-hook 'prog-mode-hook
              '(lambda () (linum-mode 1)))
    (setq-default linum-format "%4d")))
#+END_SRC

** Pallet
#+BEGIN_SRC emacs-lisp
(req-package pallet
  :init
  (progn
    (if nil pallet-init)))
#+END_SRC

** Popwin
#+BEGIN_SRC emacs-lisp
(req-package popwin
  :ensure popwin
  :config
  (progn
    (popwin-mode 1)
    (setq helm-popwin
          '(("*Helm Find Files*" :height 20)
            ("^\*helm.+\*$" :regexp t :height 20)))))
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(req-package rainbow-delimiters
  :ensure rainbow-delimiters
  :commands rainbow-delimiters-mode)
#+END_SRC

** Rainbow blocks
Probably want to customise the colours used by solarized for this mode.
#+BEGIN_SRC emacs-lisp
(req-package rainbow-blocks
  :ensure rainbow-blocks
  :commands rainbow-blocks-mode)
#+END_SRC

** Undo tree
#+BEGIN_SRC emacs-lisp
(req-package undo-tree
  :ensure undo-tree
  :diminish ""
  :init
  (progn
    (global-undo-tree-mode)))
#+END_SRC
** Whitespace
#+BEGIN_SRC emacs-lisp
    (req-package whitespace
      :diminish global-whitespace-mode
      :init
      (setq whitespace-style (quote (face tabs newline trailing tab-mark)))
      (global-whitespace-mode 1))
#+END_SRC

* GUI
** Theme
Use solarized
#+BEGIN_SRC emacs-lisp
(req-package solarized-theme
  :ensure solarized-theme
  :init
  (progn
    (setq solarized-distinct-fringe-background t)
    (setq solarized-use-more-italic t)
    (setq solarized-use-variable-pitch nil)
    (load-theme 'solarized-dark t)))
#+END_SRC

Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 140)
#+END_SRC

** Other GUI settings
Disable toolbar and scrollbar
#+BEGIN_SRC emacs-lisp
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

Only display the menu bar when on a GUI
#+BEGIN_SRC emacs-lisp
(unless (display-graphic-p) (menu-bar-mode -1))
#+END_SRC

Be quiet
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-message t)
#+END_SRC

Change buffer font sizes with Super-{-=0}
#+BEGIN_SRC emacs-lisp
(setq text-scale-mode-step 1.1)
(bind-key "s-=" '(lambda () (interactive) (text-scale-increase 1)))
(bind-key "s--" '(lambda () (interactive) (text-scale-decrease 1)))
(bind-key "s-0" '(lambda () (interactive) (text-scale-set 0)))
#+END_SRC

Change frame font sizes with Super-Shift-{-=}
#+BEGIN_SRC emacs-lisp
(defun init/change-frame-font-height (delta)
  (let ((current-height (face-attribute 'default :height)))
    (set-face-attribute 'default
                        (selected-frame)
                        :height (+ current-height delta))))
(bind-key "s-+" '(lambda () (interactive) (init/change-frame-font-height +10)))
(bind-key "s-_" '(lambda () (interactive) (init/change-frame-font-height -10)))
#+END_SRC

Go into full screen with Super-F
#+BEGIN_SRC emacs-lisp
(bind-key "s-F" 'toggle-frame-fullscreen)
#+END_SRC

* Other settings
** Tab behaviour
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(electric-indent-mode 1)
#+END_SRC

** Visual lines
#+BEGIN_SRC emacs-lisp
(setq-default visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(add-hook 'prog-mode-hook 'turn-on-visual-line-mode)
(diminish 'visual-line-mode "")
#+END_SRC
** # on a Mac
Insert a # with Option-3 on a Mac
#+BEGIN_SRC emacs-lisp
(defun insert-pound ()
  "Inserts a pound into the buffer"
  (insert "#"))

(bind-key* "M-3" '(lambda()(interactive)(insert-pound)))
#+END_SRC

** Path from shell on a Mac
#+BEGIN_SRC emacs-lisp
(req-package exec-path-from-shell
  :init
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))
#+END_SRC

** Backups and autosave files
Place them in the tmp directory
#+BEGIN_SRC emacs-lisp
(req-package files
  :init
  (progn
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))))
#+END_SRC

** Scratch buffer
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC

* Fulfill requirements
#+BEGIN_SRC emacs-lisp
(req-package-finish)
#+END_SRC
