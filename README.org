#+AUTHOR: Sam Doshi
#+EMAIL: sam@metal-fish.co.uk
#+STARTUP: content

* Emacs Init as an Org file
** Installation
1. Install [[https://github.com/cask/cask][Cask]]
  #+BEGIN_SRC sh
    brew install cask
  #+END_SRC
2. Clone
  #+BEGIN_SRC sh
    cd ~
    git clone git@github.com:samdoshi/.emacs.d.git
  #+END_SRC
3. Run =reset-cask.sh= from your =~/.emacs.d= directory
4. Run emacs!
** Upgrading packages
Either:
- Run =reset-cask.sh= again, particularly if you have removed packages
- Run =cask upgrade=
** Todo
- rainbow-identifiers [[https://github.com/syl20bnr/spacemacs/tree/master/contrib/colors][spacemacs - colors]]
- evil-lisp-state
- eldoc mode for elisp
- eval-sexp-fu
- [[http://melpa.org/#/auto-highlight-symbol][auto-highlight-symbol]]
- customise eshell [[https://github.com/technomancy/emacs-starter-kit/blob/v2/modules/starter-kit-eshell.el][link]]
- yas (integrate with company [[https://github.com/syl20bnr/spacemacs/blob/master/contrib/company-mode/packages.el][spacemacs]])

** Useful links
*** Emacs as an Org file
- [[https://github.com/jhenahan/emacs.d/blob/master/emacs-init.org][jhenahan/emacs.d]]
- [[https://github.com/daschwa/dotfiles/blob/master/emacs.d/emacs-init.org][daschwa/emacs.d]]
- [[https://github.com/steckerhalter/steckemacs/blob/master/steckemacs.org][steckerhalter/steckemacs]]
*** Evil
- [[https://github.com/syl20bnr/spacemacs][syl20bnr/spacemacs]]
- [[https://github.com/xiaohanyu/oh-my-emacs][xiaohanyu/oh-my-emacs]]
*** Other
- [[https://github.com/cofi/dotfiles/tree/master/emacs.d/config][cofi/dotfiles]]
- [[https://github.com/emacs-tw/awesome-emacs][emacs-tw/awesome-emacs]]
- [[http://emacsthemes.caisah.info/][emacsthemes.caisah.info]]
** Initialise...
*** req-package
[[https://github.com/edvorg/req-package][req-package]] extends [[https://github.com/jwiegley/use-package][use-package]], each =req-package= macro will be run once =req-package-finish= is run (at the bottom of this file).
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "init/"))
  (require 'req-package)
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC
*** The basics
#+BEGIN_SRC emacs-lisp
  (req-package f)
  (req-package s)
  (req-package init-keybindings)
  (req-package init-utils
    :require (s flyspell))
  (req-package init-theme
    :require (solarized-theme evil-leader powerline))
  (req-package init-helm-deft
    :require (helm f)
    :commands init/helm-deft)
  (req-package init-macros
    :require (evil))
  (req-package init-eshell
    :require (eshell))
  (req-package init-projectile
    :require (helm projectile))
#+END_SRC
* Evil
** Evil
Make sure we set =evil-want-C-u-scroll= & others before =evil= is loaded.
#+BEGIN_SRC emacs-lisp
(setq evil-want-C-u-scroll t)
(setq evil-want-C-w-in-emacs-state t)
(setq evil-default-cursor t)
;; http://emacs.stackexchange.com/questions/3358
(setq evil-want-fine-undo 'fine)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(req-package evil
  :ensure evil
  :require (evil-leader undo-tree)
  :init
  (progn
    (evil-mode 1)))
#+END_SRC
** Evil leader
#+BEGIN_SRC emacs-lisp
  (req-package evil-leader
    :ensure evil-leader
    :require (helm init-keybindings init-utils)
    :config
    (progn
      (evil-leader/set-leader "<SPC>")
      (global-evil-leader-mode)
      (dolist (group '(("b"  . "buffer")
                       ("c"  . "compile")
                       ("e"  . "emacs")
                       ("F"  . "files")
                       ("g"  . "git")
                       ("h"  . "help")
                       ("P"  . "projectile")
                       ("m"  . "major-mode")
                       ("o"  . "org")
                       ("s"  . "smartparens")
                       ("t"  . "text")
                       ("tr" . "rainbow")
                       ("T"  . "theme")
                       ("w"  . "window")))
        (init/evil-leader-group (car group) (cdr group)))
      (evil-leader/set-key
        "<SPC>" 'ace-jump-word-mode
        "ba"    'init/alternate-buffer
        "bb"    'helm-mini
        "bd"    'evil-delete-buffer
        "bk"    'kill-this-buffer
        "bK"    'kill-buffer
        "cc"    'init/kill-compilation-buffer
        "cf"    'helm-flycheck
        "cm"    'recompile
        "ee"    'init/edit-emacs-README.org
        "es"    'eshell
        "f"     'helm-find-files
        "gd"    'magit-diff-working-tree
        "gs"    'magit-status
        "g+"    'git-gutter:stage-hunk
        "g-"    'git-gutter:revert-hunk
        "hc"    'describe-char
        "hf"    'describe-function
        "hk"    'describe-key
        "hm"    'describe-mode
        "hp"    'describe-package
        "ht"    'describe-theme
        "hv"    'describe-variable
        "m'"    'org-edit-src-exit
        "oa"    'org-agenda
        "oc"    'org-capture
        "ot"    'org-todo-list
        "n"     'init/helm-deft
        "N"     'init/edit-Today.org
        "p"     'helm-projectile
        "Ps"    'init/projectile-eshell
        "sb"    'sp-forward-barf-sexp
        "sB"    'sp-backward-barf-sexp
        "sc"    'sp-join-sexp
        "sC"    'sp-split-sexp
        "sd"    'sp-kill-sexp
        "sD"    'sp-backward-kill-sexp
        "sk"    'sp-backward-up-sexp
        "sj"    'sp-end-of-next-sexp
        "ss"    'sp-forward-slurp-sexp
        "sS"    'sp-backward-slurp-sexp
        "tc"    'helm-flyspell-correct
        "td"    'osx-dictionary-search-pointer
        "tf"    'init/flyspell-mode
        "trb"   'rainbow-blocks-mode
        "trd"   'rainbow-delimiters-mode
        "ts"    'ispell
        "Td"    'init/solarized-dark-theme
        "Tl"    'init/solarized-light-theme
        "v"     'er/expand-region
        "wc"    'evil-window-delete
        "wh"    'evil-window-left
        "wj"    'evil-window-down
        "wk"    'evil-window-up
        "wl"    'evil-window-right
        "wr"    'evil-window-rotate-downwards
        "ws"    'init/split-window-and-focus
        "wv"    'init/vsplit-window-and-focus
        "ww"    'evil-window-next
        "wW"    'evil-window-prev
        "x"     'helm-M-x
        ":"     'helm-M-x)))
#+END_SRC
** Evil escape
#+BEGIN_SRC emacs-lisp
  (req-package evil-escape
    :require evil
    :diminish evil-escape-mode
    :init (setq-default evil-escape-key-sequence "kj")
    :config (evil-escape-mode))
#+END_SRC
** Evil matchit
#+BEGIN_SRC emacs-lisp
  (req-package evil-matchit
    :require evil
    :config (global-evil-matchit-mode 1))
#+END_SRC
* Major modes
** Compilation
#+BEGIN_SRC emacs-lisp
  (req-package compile
    :require (init-utils)
    :init
    (progn
      (add-hook 'compilation-mode-hook 'init/small-font-buffer)))

#+END_SRC
** Eshell
#+BEGIN_SRC emacs-lisp
  (req-package eshell
    :defer t
    :require (exec-path-from-shell init-utils)
    :init
    (progn
      (add-hook 'eshell-mode-hook 'init/small-font-buffer)))
#+END_SRC
** Haskell
https://github.com/serras/emacs-haskell-tutorial/blob/master/tutorial.md
==ghc-mod== has [[https://github.com/kazu-yamamoto/ghc-mod/issues/417][problems]], uncomment below when it's fixed
#+BEGIN_SRC emacs-lisp
  (req-package haskell-mode
    :require (evil-leader)
    ;;:require (evil-leader ghc company company-ghc)
    :init
    (progn
      (defun init/haskell-test ()
        (interactive)
        (haskell-process-do-cabal "test"))
      (evil-leader/set-key-for-mode 'haskell-mode
        "cb"  'haskell-process-load-file
        "cm"  'haskell-process-cabal-build
        "ct"  'init/haskell-test)
      ;;(autoload 'ghc-init "ghc" nil t)
      ;;(autoload 'ghc-debug "ghc" nil t)

      (setq haskell-tags-on-save t
            haskell-interactive-popup-errors nil
            haskell-process-type 'cabal-repl
            haskell-process-suggest-remove-import-lines t
            haskell-process-suggest-hoogle-imports t
            haskell-process-auto-import-loaded-modules t
            haskell-process-show-debug-tips nil
            haskell-process-log t)

      ;;(add-to-list 'company-backends 'company-ghc)

      )
    :config
    (progn
      (defun init/haskell-mode-hook ()
        ;;(ghc-init)
        (turn-on-haskell-indentation)
        (turn-on-haskell-doc)
        (turn-on-eldoc-mode))
      (add-hook 'haskell-mode-hook 'init/haskell-mode-hook)))

  (req-package flycheck-haskell
    :require (haskell-mode flycheck)
    :commands flycheck-haskell-setup
    :init
    (progn
      (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup)))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (req-package magit
    :require (init-macros)
    :commands (magit-status
               magit-diff
               magit-diff-working-tree
               magit-log
               magit-commit)
    :config
    (progn
      (init|evilify magit-commit-mode-map
                    (kbd "C-j") 'magit-goto-next-section
                    (kbd "C-k") 'magit-goto-previous-section
                    (kbd "C-n") 'magit-goto-next-section
                    (kbd "C-p") 'magit-goto-previous-section
                    (kbd "C-v") 'magit-revert-item)
      (init|evilify magit-log-mode-map
                    (kbd "C-j") 'magit-goto-next-section
                    (kbd "C-k") 'magit-goto-previous-section
                    (kbd "C-n") 'magit-goto-next-section
                    (kbd "C-p") 'magit-goto-previous-section
                    (kbd "C-v") 'magit-revert-item)
      (init|evilify magit-process-mode-map
                    (kbd "C-j") 'magit-goto-next-section
                    (kbd "C-k") 'magit-goto-previous-section
                    (kbd "C-n") 'magit-goto-next-section
                    (kbd "C-p") 'magit-goto-previous-section
                    (kbd "C-v") 'magit-revert-item)
      (init|evilify magit-branch-manager-mode-map
                    "K" 'magit-discard-item
                    "L" 'magit-key-mode-popup-logging
                    (kbd "C-j") 'magit-goto-next-section
                    (kbd "C-k") 'magit-goto-previous-section
                    (kbd "C-n") 'magit-goto-next-section
                    (kbd "C-p") 'magit-goto-previous-section
                    (kbd "C-v") 'magit-revert-item)
      (init|evilify magit-status-mode-map
                    "K" 'magit-discard-item
                    "L" 'magit-key-mode-popup-logging
                    "H" 'magit-key-mode-popup-diff-options
                    (kbd "C-j") 'magit-goto-next-section
                    (kbd "C-k") 'magit-goto-previous-section
                    (kbd "C-n") 'magit-goto-next-section
                    (kbd "C-p") 'magit-goto-previous-section
                    (kbd "C-v") 'magit-revert-item)))
#+END_SRC
** Markdown
[[http://jblevins.org/projects/markdown-mode/][Markdown mode]]
#+BEGIN_SRC emacs-lisp
  (req-package markdown-mode)
#+END_SRC
** Org
[[http://orgmode.org/][Org mode]]
#+BEGIN_SRC emacs-lisp
  (req-package org-install
    :ensure org
    :require (evil-leader)
    :init
    (progn
      (evil-leader/set-key-for-mode 'org-mode
        "ml"  'org-insert-link
        "mn"  'org-narrow-to-subtree
        "mo"  'org-open-at-point
        "mtr" 'org-table-recalculate
        "mtR" 'org-table-iterate
        "mw"  'widen
        "m'"  'org-edit-special)
      (setq org-directory "~/Dropbox/Notes"
            org-default-notes-file (concat org-directory "/Today.org")
            org-agenda-files (list (concat org-directory "/Today.org"))
            org-startup-indented t
            org-startup-folded "showall"
            org-src-tab-acts-natively t
            org-src-fontify-natively t)))
#+END_SRC
** Rust
[[https://github.com/rust-lang/rust/tree/master/src/etc/emacs][Homepage]]
#+BEGIN_SRC emacs-lisp
  (req-package rust-mode
    :init
    (progn
      (setq-default rust-indent-method-chain nil
                    rust-indent-offset 4)
      (add-hook 'rust-mode-hook (lambda ()
                                  (setq-local compile-command "cargo build")))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (req-package flycheck-rust
    :require (flycheck)
    :config
    (progn
        (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+END_SRC
* Minor modes
** Ace jump
#+BEGIN_SRC emacs-lisp
  (req-package ace-jump-mode
    :commands (ace-jump-word-mode))
#+END_SRC
** Adaptive wrap
#+BEGIN_SRC emacs-lisp
(req-package adaptive-wrap
  :ensure adaptive-wrap
  :init
  (progn
    (add-hook 'visual-line-mode-hook 'adaptive-wrap-prefix-mode)))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (req-package company
    :diminish "Ⓒ "
    :init
    (progn
      (setq company-idle-delay 0.1
            company-minimum-prefix-length 2
            company-require-match nil
            company-dabbrev-downcase nil
            company-tooltip-flip-when-above t
            company-selection-wrap-around t))
    :config
    (progn
      (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
      (define-key company-active-map [tab] 'company-complete-common-or-cycle)
      (define-key company-active-map (kbd "S-TAB") 'company-select-previous-or-abort)
      (define-key company-active-map [S-tab] 'company-select-previous-or-abort)
      (global-company-mode t)))
#+END_SRC
** Expand region
Enable expand region in visual mode with an extra =v=
#+BEGIN_SRC emacs-lisp
  (req-package expand-region
    :defer t
    :commands er/expand-region
    :init
    (progn
      (setq expand-region-contract-fast-key "V"
            expand-region-reset-fast-key    "r")))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (req-package flycheck
    :ensure flycheck
    :init
    (progn
      (global-flycheck-mode t))
    :config
    (progn
      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))))
  (req-package helm-flycheck
    :commands helm-flycheck
    :require flycheck)
#+END_SRC
** Flyspell
#+BEGIN_SRC emacs-lisp
  (req-package flyspell
    :require (ispell))

  (req-package helm-flyspell
    :require (flyspell helm)
    :defer t
    :commands (helm-flyspell-correct))
#+END_SRC
** Git gutter fringe
#+BEGIN_SRC emacs-lisp
  (req-package git-gutter-fringe
    :diminish git-gutter-mode
    :config (global-git-gutter-mode))
#+END_SRC
** Guide key
[[https://github.com/kai2nenobu/guide-key][Guide key]] displays the available keybindings in a popup window.
#+BEGIN_SRC emacs-lisp
  (req-package guide-key
    :diminish guide-key-mode
    :init
    (progn
      (setq guide-key/guide-key-sequence `("<SPC>" "g" "C-c" "C-h" "C-w" "C-x")
            guide-key/recursive-key-sequence-flag t
            guide-key/highlight-command-regexp "group:"
            guide-key/text-scale-amount 1
            guide-key/idle-delay 0.3)
      (guide-key-mode t)))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
(req-package helm
  :ensure helm
  :diminish helm-mode
  :config
  (progn
    (require 'helm-config)
    (require 'helm-files)
    (setq helm-split-window-in-side-p t)
    (bind-key "C-j" 'helm-next-line helm-map)
    (bind-key "C-k" 'helm-previous-line helm-map)
    (bind-key "C-S-j" 'helm-next-source helm-map)
    (bind-key "C-S-k" 'helm-previous-source helm-map)
    ;; for helm-find-files
    (bind-key "<tab>" 'helm-execute-persistent-action helm-find-files-map)
    ;; for find-file
    (bind-key "<tab>" 'helm-execute-persistent-action helm-read-file-map)
    (helm-mode 1)))
#+END_SRC
** Ispell
#+BEGIN_SRC emacs-lisp
  (req-package ispell
    :init
    (progn
      (setq-default ispell-program-name "aspell")
      (setq ispell-dictionary "british")))
#+END_SRC

** Linum
Line numbers in programming modes
#+BEGIN_SRC emacs-lisp
  (req-package linum
    :config
    (progn
      (add-hook 'prog-mode-hook
                '(lambda () (linum-mode 1)))
      (add-hook 'text-mode-hook
                '(lambda () (linum-mode 1)))
      (setq-default linum-format "%4d")))
#+END_SRC
** Neo tree
#+BEGIN_SRC emacs-lisp
  (req-package neotree
    :init
    (progn
      (setq neo-theme 'arrow)))
#+END_SRC
** OSX Dictionary
#+BEGIN_SRC emacs-lisp
  (req-package osx-dictionary
    :defer t
    :commands (osx-dictionary-search-pointer osx-dictionary-search-input))
#+END_SRC
** Pallet
[[https://github.com/rdallasgray/pallet][Pallet]] is used to provide the =(pallet-init)= command used in =reset-cask.sh=.
#+BEGIN_SRC emacs-lisp
  (req-package pallet)
#+END_SRC
** Popwin
#+BEGIN_SRC emacs-lisp
  (req-package popwin
    :ensure popwin
    :config
    (progn
      (popwin-mode 1)
      (setq helm-popwin
            '(("*Helm Find Files*" :height 20)
              ("^\*helm.+\*$" :regexp t :height 20)))))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (req-package projectile
    :config
    (progn
      (projectile-global-mode)))

  (req-package helm-projectile
    :require (projectile helm)
    :commands (helm-projectile)
    :config
    (progn
      (helm-projectile-on)))
#+END_SRC
** Rainbow blocks
Probably want to customise the colours used by solarized for this mode.
#+BEGIN_SRC emacs-lisp
  (req-package rainbow-blocks
    :commands rainbow-blocks-mode
    :diminish "")
#+END_SRC
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (req-package rainbow-delimiters
    :commands rainbow-delimiters-mode
    :diminish ""
    :init
    (progn
      (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC
** Rainbow mode
#+BEGIN_SRC emacs-lisp
  (req-package rainbow-mode
    :diminish rainbow-mode
    :config
    (progn
      (add-hook 'prog-mode-hook 'rainbow-mode)))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (req-package smartparens-config
    :ensure smartparens
    :diminish (smartparens-mode . "")
    :init
    (progn
      (add-hook 'prog-mode-hook 'smartparens-mode)
      (add-hook 'prog-mode-hook 'show-smartparens-mode))
    :config
    (progn
      ;; play nicely with evil
      (setq sp-show-pair-from-inside t
            sp-autoescape-string-quote nil)
      (defun init/smartparens-pair-newline-and-indent (&rest _ignored)
        ;; https://github.com/Fuco1/smartparens/issues/80
        (save-excursion
          (newline)
          (indent-according-to-mode))
        (indent-according-to-mode))
      (sp-pair "{" nil :post-handlers
               '(:add (init/smartparens-pair-newline-and-indent "RET")))
      (sp-pair "[" nil :post-handlers
               '(:add (init/smartparens-pair-newline-and-indent "RET")))))
#+END_SRC
** Undo tree
#+BEGIN_SRC emacs-lisp
  (req-package undo-tree
    :ensure undo-tree
    :diminish ""
    :init
    (progn
      (global-undo-tree-mode)))
#+END_SRC
** Whitespace
#+BEGIN_SRC emacs-lisp
  (req-package whitespace
    :diminish global-whitespace-mode
    :init
    (setq whitespace-style (quote (face tabs newline trailing tab-mark)))
    (global-whitespace-mode 1))
#+END_SRC
* GUI
** Theme
Use solarized
#+BEGIN_SRC emacs-lisp
  (req-package solarized-theme
    :init
    (progn
      (setq solarized-distinct-fringe-background t)
      (setq solarized-use-more-italic t)
      (setq solarized-use-variable-pitch nil)))
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
  (req-package powerline)
#+END_SRC
* Other settings
** Exec path from shell
Get the path from a shell on a Mac
#+BEGIN_SRC emacs-lisp
  (req-package exec-path-from-shell
    :init
    (progn
      (when (memq window-system '(mac ns))
        (exec-path-from-shell-initialize))))
#+END_SRC
* Load packages
#+BEGIN_SRC emacs-lisp
  (req-package-finish)
#+END_SRC
* Post package settings
** Visual lines
#+BEGIN_SRC emacs-lisp
  (setq-default visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
  (add-hook 'prog-mode-hook 'turn-on-visual-line-mode)
  (diminish 'visual-line-mode "")
#+END_SRC
** Tab behaviour
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (electric-indent-mode 1)
#+END_SRC
** Host settings
Per host settings
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message (init/initial-scratch-message))
  (set-face-attribute 'default nil :family "Menlo")
  (set-face-attribute 'default nil :weight 'normal)
  (set-face-attribute 'default nil :height 140)
  (init/solarized-dark-theme)
  (let ((host (init/hashed-host-slug))
        (desktop "24e0c4b6b602908fd5cc6be519f8d96b")
        (laptop "1808cc85340608cde18d5cab8b3be29d"))
    (message (concat "init/hashed-host-slug=" host))
    (when (equal host desktop)
      (progn
        (when window-system (set-frame-size (selected-frame) 120 84))))
    (when (equal host laptop)
      (progn
        (when window-system (set-frame-size (selected-frame) 120 46))
        (set-face-attribute 'default nil :height 130))))
#+END_SRC
** # on a Mac
Insert a # with Option-3 on a Mac
#+BEGIN_SRC emacs-lisp
  (defun insert-pound ()
    "Inserts a pound into the buffer"
    (insert "#"))

  (bind-key* "M-3" '(lambda()(interactive)(insert-pound)))
#+END_SRC
** Backups and autosave files
Place them in the tmp directory
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC
** Global auto-revert
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode)
#+END_SRC
** Other GUI settings
Disable toolbar and scrollbar
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

Only display the menu bar when on a GUI
#+BEGIN_SRC emacs-lisp
  (unless (display-graphic-p) (menu-bar-mode -1))
#+END_SRC

Be quiet
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)
#+END_SRC

Change buffer font sizes with Super-{-=0}
#+BEGIN_SRC emacs-lisp
  (setq text-scale-mode-step 1.1)
  (bind-key "s-=" '(lambda () (interactive) (text-scale-increase 1)))
  (bind-key "s--" '(lambda () (interactive) (text-scale-decrease 1)))
  (bind-key "s-0" '(lambda () (interactive) (text-scale-set 0)))
#+END_SRC

Change frame font sizes with Super-Shift-{-=}
#+BEGIN_SRC emacs-lisp
  (bind-key "s-+" '(lambda () (interactive) (init/change-frame-font-height +10)))
  (bind-key "s-_" '(lambda () (interactive) (init/change-frame-font-height -10)))
#+END_SRC

Go into full screen with Super-F
#+BEGIN_SRC emacs-lisp
  (bind-key "s-F" 'toggle-frame-fullscreen)
#+END_SRC

Move the position of underlines to the bottomline instead of the baseline
#+BEGIN_SRC emacs-lisp
  (setq x-underline-at-descent-line t)
#+END_SRC
